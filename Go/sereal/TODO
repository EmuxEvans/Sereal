   TODO:
    - better test infrastructure: table-driven tests that use Perl's test cases
    - create tracked references during pack (circular structures)
    - how do we handle hashes?
       : only string keys are supported -- do we call value.String() or panic()?
    - how to deal with interface{} everywhere for deserialization
    - any other coersions (ints <-> strings)
    - add decoder and encoder objects + options (snappy threshold, snappy on/off, string vs. byte array handling..)
    - make slice usage more idiomatic
    - "header size" -> "optional header size"
    - roundtrip test: perl obj -> perl-sereal stream -> go1 obj -> go-sereal stream -> go2 obj, DeepEqual(go1, go2)
    - we should treat input buffer as read-only when unpacking
    - '5' == 'sereal-header-size'
    - lots of duplicatish code to remove:
           encoding scalars only code (encodeArrayRef, encodeMapRef, encodeArray, encodeMap)
           encodeArray/Ref and encodeMap/Ref should each be combined
    - better handling of uintptr for circular data structures
    - match 'ptr->array' and 'ptr->hash' can become ARRAYREF and HASHREF
    - class names need their own string table (for OBJECTV)
